@page "/user"
@    using AppData.Entities
@    using AppData.DTO
@    using BlazorServer.IServices
@inject IServices<WebUser> UserService
@inject IJSRuntime JS

<h3>Quản Lý Người Dùng</h3>

<div class="row">
    <!-- Thông Tin Người Dùng -->
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <strong>Thông Tin</strong>
            </div>
            <EditForm Model="@User" OnValidSubmit="HandleSubmit" OnInvalidSubmit="HandleInvalidSubmit">
                <DataAnnotationsValidator />
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert @((errorMessage.Contains("thành công") ? "alert-success" : "alert-danger"))" role="alert">
                        @errorMessage
                    </div>
                }

                <!-- Các trường thông tin người dùng -->
                <div class="form-group">
                    <label for="userName">Tên Người Dùng</label>
                    <input type="text" id="userName" @bind="User.FullName" class="form-control" placeholder="Tên Người Dùng" />
                    <ValidationMessage For="@(() => User.FullName)" />
                </div>
                <div class="form-group">
                    <label for="userEmail">Email</label>
                    <input type="email" id="userEmail" @bind="User.Email" class="form-control" placeholder="Email" />
                    <ValidationMessage For="@(() => User.Email)" />
                </div>
                <div class="form-group">
                    <label for="userPhoneNumber">Số Điện Thoại</label>
                    <input type="text" id="userPhoneNumber" @bind="User.PhoneNumber" class="form-control" placeholder="Số Điện Thoại" />
                    <ValidationMessage For="@(() => User.PhoneNumber)" />
                </div>
                <div class="form-group">
                    <label for="userAddress">Địa Chỉ</label>
                    <input type="text" id="userAddress" @bind="User.Address" class="form-control" placeholder="Địa Chỉ" />
                    <ValidationMessage For="@(() => User.Address)" />
                </div>
                <div class="form-group">
                    <label for="userPassword">Mật Khẩu</label>
                    <input type="password" id="userPassword" @bind="User.Password" class="form-control" placeholder="Mật Khẩu" />
                    <ValidationMessage For="@(() => User.Password)" />
                </div>
                <div class="form-group">
                    <label>Trạng Thái</label><br />
                    <input type="radio" id="active" @onclick="() => User.Status = 1" checked="@((User.Status == 1))" />
                    <label for="active">Bình thường</label>
                    <input type="radio" id="maintenance" @onclick="() => User.Status = 0" checked="@((User.Status == 0))" />
                    <label for="maintenance">Khóa</label>
                    <ValidationMessage For="@(() => User.Status)" />
                </div>

                <!-- Nút Tạo và Cập Nhật -->
                <div class="form-group">
                    @if (User.UserId == Guid.Empty)
                    {
                        <button type="submit" class="btn btn-primary">Tạo</button>
                    }
                    else
                    {
                        <button type="submit" class="btn btn-warning">Cập Nhật</button>
                    }
                </div>
            </EditForm>

        </div>
    </div>

    <!-- Danh Sách Người Dùng -->
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <strong>Danh Sách Người Dùng</strong>
                <div class="input-group mt-2">
                    <input type="text" class="form-control" placeholder="Tìm kiếm tên người dùng..." @bind="searchText" />
                    <div class="input-group-append">
                        <button class="btn btn-secondary" @onclick="SearchFields">
                            <i class="fas fa-search"></i> Tìm Kiếm
                        </button>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>STT</th>
                            <th>Tên</th>
                            <th>Email</th>
                            <th>SĐT</th>
                            <th>Địa Chỉ</th>
                            <th>Trạng thái</th>
                            <th>Thao Tác</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Users == null)
                        {
                            <tr>
                                <td colspan="7" class="text-center">Đang tải dữ liệu...</td>
                            </tr>
                        }
                        else if (!Users.Any())
                        {
                            <tr>
                                <td colspan="7" class="text-center">Không có người dùng nào để hiển thị.</td>
                            </tr>
                        }
                        else
                        {
                            int index = 0;
                            @foreach (var user in Users)
                            {
                                <tr>
                                    <td>@(++index)</td>
                                    <td>@user.FullName</td>
                                    <td>@user.Email</td>
                                    <td>@user.PhoneNumber</td>
                                    <td>@user.Address</td>
                                    <td>@(user.Status == 1 ? "Bình thường" : "Khóa")</td>
                                    <td>
                                        <button class="btn btn-info" @onclick="() => EditField(user.UserId)">
                                            <i class="fas fa-edit"></i> Sửa
                                        </button>
                                        <button class="btn btn-danger" @onclick="() => ConfirmDelete(user.UserId)">
                                            <i class="fas fa-trash-alt"></i> Xóa
                                        </button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@code {
    private List<WebUser> allUsers = new List<WebUser>();
    private List<WebUser> Users = new List<WebUser>();
    private WebUser User = new WebUser();
    private string searchText = string.Empty;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        allUsers = await UserService.GetAllFieldsAsync();
        Users = new List<WebUser>(allUsers);
    }

    private async Task HandleSubmit()
    {
        if (User.UserId == Guid.Empty)
        {
            await CreateField();
        }
        else
        {
            await ConfirmUpdateField();
        }
    }

    private async Task CreateField()
    {
        try
        {
            bool success = await UserService.CreateFieldAsync(User);
            if (success)
            {
                Users = await UserService.GetAllFieldsAsync();
                User = new WebUser();
                errorMessage = "Đã tạo mới thành công!";
            }
            else
            {
                errorMessage = "Không thể tạo người dùng mới. Hãy kiểm tra lại dữ liệu.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Đã xảy ra lỗi: {ex.Message}";
        }
    }

    private async Task UpdateField()
    {
        try
        {
            bool success = await UserService.UpdateFieldAsync(User.UserId, User);
            if (success)
            {
                Users = await UserService.GetAllFieldsAsync();
                User = new WebUser();
                errorMessage = "Cập nhật thành công!";
            }
            else
            {
                errorMessage = "Không thể cập nhật người dùng. Hãy kiểm tra lại dữ liệu.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Đã xảy ra lỗi: {ex.Message}";
        }
    }

    private void EditField(Guid id)
    {
        var UserToEdit = Users.FirstOrDefault(f => f.UserId == id);
        if (UserToEdit != null)
        {
            User = new WebUser
                {
                    UserId = UserToEdit.UserId,
                    FullName = UserToEdit.FullName,
                    Email = UserToEdit.Email,
                    PhoneNumber = UserToEdit.PhoneNumber,
                    Address = UserToEdit.Address,
                    Password = UserToEdit.Password,
                    Status = UserToEdit.Status,
                    CreatedAt = UserToEdit.CreatedAt,
                    UpdatedAt = UserToEdit.UpdatedAt,
                    CreatedBy = UserToEdit.CreatedBy,
                    UpdatedBy = UserToEdit.UpdatedBy
                };
        }
    }

    private async Task ConfirmUpdateField()
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirmAction", "Bạn có chắc chắn muốn cập nhật người dùng này?");
        if (confirmed)
        {
            await UpdateField();
        }
    }

    private async Task ConfirmDelete(Guid id)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirmAction", "Bạn có chắc chắn muốn xóa người dùng này?");
        if (confirmed)
        {
            await DeleteField(id);
        }
    }

    private async Task DeleteField(Guid id)
    {
        await UserService.DeleteFieldAsync(id);
        Users = await UserService.GetAllFieldsAsync();
    }

    private void SearchFields()
    {
        if (string.IsNullOrEmpty(searchText))
        {
            Users = new List<WebUser>(allUsers);
        }
        else
        {
            Users = allUsers
                .Where(f => f.FullName.Contains(searchText, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    private void HandleInvalidSubmit()
    {
        errorMessage = "Form không hợp lệ. Hãy kiểm tra các trường nhập liệu!";
    }
}
