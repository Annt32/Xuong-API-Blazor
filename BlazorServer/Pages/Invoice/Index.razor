@page "/invoice"
@using AppData.Entities
@using BlazorServer.IServices
@inject IInvoiceServices services
@inject NavigationManager navigation

<div class="row">  
    <!-- Danh Sách Hóa Đơn -->
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <strong>Danh Sách Hóa Đơn</strong>
            </div>
            <div class="card-body">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>STT</th>
                            <th>Mã Hóa Đơn</th>
                            <th>Khách Hàng</th>
                            <th>Số Điện Thoại</th>
                            <th>Email</th>
                            <th>Tổng tiền</th>
                            <th>Phí Bổ Sung</th>
                            <th>Ghi Chú</th>
                            <th>Trạng Thái</th>
                            <th>Thao Tác</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (invoices == null || !invoices.Any())
                        {
                            <tr>
                                <td colspan="12" class="text-center">Đang tải dữ liệu...</td>
                            </tr>
                        }
                        else
                        {
                            int index = 0;
                            @foreach (var item in invoices)
                            {
                                var user = lstUser.FirstOrDefault(u => u.Id == item.UserId);
                                <tr>
                                    <td>@(++index)</td>
                                    <td>@item.IdInvoice</td>
                                    <td>@user?.FullName</td>
                                    <td>@user?.PhoneNumber</td>
                                    <td>@user?.Email</td>
                                    <td>@item?.TotalAmount</td>                                
                                    <td>@item.AdditionalFee</td>                               
                                    <td>@item.Notes</td>
                                    <td>@GetStatusName(item.Status)</td>
                                    <td>
                                        <button class="btn btn-warning" @onclick="() => SelectInvoice(item.IdInvoice)">Chi Tiết</button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Danh Sách Chi Tiết Hóa Đơn -->
        @if (selectedInvoiceDetails != null && selectedInvoiceDetails.Any())
        {
            <div class="card mt-3">
                <div class="card-header">
                    <strong>Chi Tiết Hóa Đơn</strong>
                </div>
                <div class="card-body">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>STT</th>
                                <th>IdInvoiceDetail</th>
                                <th>FieldName</th>
                                <th>Địa chỉ</th>
                                <th>ca</th>
                                <th>Trạng thái</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (selectedInvoiceDetails == null || !selectedInvoiceDetails.Any())
                            {
                                <tr>
                                    <td colspan="6" class="text-center">Đang tải dữ liệu...</td>
                                </tr>
                            }
                            else
                            {
                                int index = 0;
                                @foreach (var detail in selectedInvoiceDetails)
                                {
                                    // Tìm FieldShift theo IdFieldShift trong mỗi chi tiết hóa đơn
                                    var fieldShift = FieldShifts.FirstOrDefault(f => f.IdFieldShift == detail.IdFieldShift);
                                    var field = Fields.FirstOrDefault(f => f.IdField == fieldShift?.IdField);
                                    var shift = Shifts.FirstOrDefault(s => s.IdShift == fieldShift?.IdShift);

                                    <tr>
                                        <td>@(++index)</td>
                                        <td>@detail.IdInvoiceDetail</td>
                                        <td>@field?.FieldName</td> 
                                        <td>@field?.Location</td>
                                        <td>@shift?.ShiftName @shift?.StartTime - @shift?.EndTime</td>
                                        <td>@GetStatusName(detail.Status)</td>
                                    </tr>
                                }
                            }
                        </tbody>

                    </table>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private Invoice invoice = new Invoice();
    private List<Invoice> invoices = new List<Invoice>();

    private List<User> lstUser = new List<User>();

    private List<InvoiceDetail> lstInvoiceDetail = new List<InvoiceDetail>();
    private List<InvoiceDetail> selectedInvoiceDetails = new List<InvoiceDetail>(); 

    private List<FieldShift> FieldShifts = new List<FieldShift>();
    private List<Field> Fields = new List<Field>();
    private List<Shift> Shifts = new List<Shift>();


    private Guid selectedInvoiceId = Guid.Empty; // Mã hóa đơn được chọn
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        invoices = await services.GetAllInvoiceAsync();
        lstUser = await services.GetAllUser();
        lstInvoiceDetail = await services.GetAllInvoiceDetailAsync();
        FieldShifts = await services.GetAllFieldShiftAsync();
        Fields = await services.GetAllShiftAsync();
        Shifts = await services.GetFieldByTypeAsync();
    }

    private string GetStatusName(int status)
    {
        return status switch
        {
            3 => "WaitingForCheckin",
            4 => "Renting",
            _ => "Unknown"
        };
    }

    private void SelectInvoice(Guid id)
    {
        selectedInvoiceId = id;
        selectedInvoiceDetails = lstInvoiceDetail.Where(detail => detail.IdInvoice == selectedInvoiceId).ToList();
    }

    protected async Task NavigateToEdit(Guid id)
    {
        navigation.NavigateTo($"/Invoice/Invoice-put/{id}");
    }

    private async Task HandleSubmit()
    {
        bool result = await services.UpdateUserInvoice(invoice.IdInvoice, invoice);
        errorMessage = result ? "Cập nhật hóa đơn thành công" : "Cập nhật hóa đơn thất bại";
    }

    private void HandleInvalidSubmit()
    {
        // Xử lý khi form không hợp lệ
    }

    private void ConfirmDelete(Guid id)
    {
        // Thực hiện xóa hóa đơn theo Id
    }
}
