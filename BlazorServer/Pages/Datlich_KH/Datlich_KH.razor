@page "/dat-lich"
@using System.Globalization
@using AppData.DTO
@using AppData.DTO.FieldType_DTO
@using AppData.DTO.Field_DTO
@using AppData.Entities
@using BlazorServer.IServices
@inject IFieldShiftService _svFS;
@inject IInvoiceServices _invoiceService;
@inject IInvoiceDetailService _invoiceDetailService;

<div>
	<header>
	</header>
	<div class="col-12">
		<div class="row">
			<!-- Lịch bé trong col-2 -->
			<div class="col-2">
				<div class="col-12">
					<h6 align="center">Chọn ngày</h6>
					<hr />
					<div class="calendar-container">
						<div class="row nav-buttons">
							<button class="btn col-1" @onclick="PreviousMonth">&lt;</button>
							<h5 class="col-9 text-center">@monthAndYear</h5>
							<button class="btn col-1" @onclick="NextMonth">&gt;</button>
						</div>
						<table class="table table-bordered">
							<thead>
								<tr>
									<th>Sun</th>
									<th>Mon</th>
									<th>Tue</th>
									<th>Wed</th>
									<th>Thu</th>
									<th>Fri</th>
									<th>Sat</th>
								</tr>
							</thead>
							<tbody>
								@foreach (var week in smallCalendar)
								{
									<tr>
										@foreach (var day in week)
										{
											<td class="@GetClassForDate(day)" @onclick="() => SelectDate(day)">
												@day.Day
											</td>
										}
									</tr>
								}
							</tbody>
						</table>
					</div>
				</div>
			</div>

			<!-- Lịch lớn trong col-7 -->
			<div class="col-7">
				<h6 align="center">Đặt lịch</h6>
				<hr />
				<div class="calendar-large">
					<table class="table table-bordered">
						<thead>
							<tr>
								<th>Sun</th>
								<th>Mon</th>
								<th>Tue</th>
								<th>Wed</th>
								<th>Thu</th>
								<th>Fri</th>
								<th>Sat</th>
							</tr>
						</thead>
						<tbody>
							@foreach (var week in largeCalendar)
							{
								<tr>
									@foreach (var day in week)
									{
										<td class="@GetClassForDate(day)">
											@day.Day
										</td>
									}
								</tr>
							}

						</tbody>
					</table>
				</div>
			</div>

			<!-- Danh sách sự kiện trong col-3 -->
			<div class="col-3">
				<h6 align="center">Sự kiện</h6>
				<hr />
				<div class="mt-2">
					<table class="table table-sukien">
						<thead>
							<tr>
								<th>Thông tin ca</th>
								<th>Thao tác</th>
							</tr>
						</thead>
						<tbody>
							<!-- Sự kiện sẽ được thêm ở đây -->
						</tbody>
					</table>
				</div>
			</div>
		</div>
	</div>
</div>

<!--Modal-->
@if (isActiveModal == 1)
{
	<div class="modal fade show" tabindex="-1" role="dialog" style="display: block;">
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<div class="col-12">
						<div class="row">
							<div class="col-1">
								<button type="button" class="btn" @onclick="CloseModal" aria-label="Close">
									<span aria-hidden="true">&times;</span>
								</button>
							</div>
							<div class="col-5">
								<h6>Thông tin sân</h6>
							</div>
						</div>

					</div>
				</div>
				<div class="modal-body">
					<EditForm Model="@input" OnValidSubmit="async () => await CreateFieldShift()">
						<DataAnnotationsValidator />
						<div class="mb-3">
							<label for="" class="form-label">Loại sân</label>
							<InputSelect @bind-Value="IdFT" class="form-control" TValue="Guid">
								<option selected value="@Guid.Empty">--Chọn loại sân--</option>
								@foreach (var item in _lstFT)
								{
									<option value="@item.Id">@item.Name</option>
								}
							</InputSelect>

						</div>
						<div class="mb-3">
							<label for="" class="form-label">Sân số</label>
							<InputSelect @bind-Value="input.IdField" class="form-select">
								<option selected value="@Guid.Empty">--Chọn sân--</option>
								@foreach (var item in _lstF)
								{
									<option value="@item.IdField">@item.FieldName</option>
								}
							</InputSelect>
						</div>

						<div class="mb-3">
							<label for="" class="form-label">Ca</label>
							<InputSelect @bind-Value="input.IdShift" class="form-control">
								<option selected value="@Guid.Empty">--Chọn ca--</option>
								@foreach (var item in _lstS)
								{
									<option value="@item.IdShift">@item.ShiftName</option>
								}
							</InputSelect>
						</div>
						<div class="mb-3">
							<label for="" class="form-label">Ngày</label>
							<InputDate @bind-Value="selectedDate" class="form-control" readonly />
						</div>
						<div class="mb-3">
							<label for="" class="form-label">Giá</label>
							<InputText @bind-Value="linhtinh" class="form-control" readonly />
						</div>
						@if (messageString == "Đặt lịch thành công")
						{
							<p class="alert alert-success">@messageString</p>
						}
						else if (messageString == "Đặt lịch thất bại")
						{
							<p class="alert alert-danger">@messageString</p>
						}

						<button type="submit" class="btn btn-primary">Đặt</button>
					</EditForm>
				</div>
			</div>
		</div>
	</div>
}
<!--EndModal-->

<style>
	/* Tùy chỉnh các ô lịch */
	table td {
		text-align: center;
		padding: 10px;
		cursor: pointer;
		border: 1px solid #ddd;
	}

	/* Ngày được chọn */
	.selected-date {
		background-color: #0d6efd;
		color: white;
		border-radius: 50%;
	}

	/* Ngày hiện tại */
	.today {
		background-color: #ffc107;
		color: white;
		border-radius: 50%;
	}

	/* Di chuyển giữa các tháng */
	.nav-buttons button {
		background: none;
		border: none;
		font-size: 1.5em;
		cursor: pointer;
		color: #0d6efd;
	}

	.nav-buttons h5 {
		margin: 0;
		font-size: 1.2em;
	}

	/* Lịch lớn */
	.calendar-large {
		border: 1px solid #ddd;
		padding: 10px;
		background-color: #f8f9fa;
		border-radius: 10px;
	}

	/* Lịch nhỏ */
	.calendar-container {
		border: 1px solid #ddd;
		padding: 10px;
		background-color: #f8f9fa;
		border-radius: 10px;
	}

		.calendar-container th {
			font-size: 9px;
		}

		.calendar-container td {
			font-size: 10px;
		}

	/* Header */
	h6 {
		font-weight: bold;
		margin-bottom: 15px;
	}

	/* Divider */
	hr {
		border-top: 2px solid #0d6efd;
	}

	/* Bảng sự kiện */
	.table-sukien th {
		background-color: #0d6efd;
		color: white;
		text-align: center;
	}

	/* Khi hover */
	table tbody tr td:hover {
		background-color: #f1f1f1;
	}


	/*linh tinh*/
	td {
		text-align: center
	}

	th {
		text-align: center
	}

	.modal {
		top: 10%;
	}
</style>

@code {
	private string linhtinh = "Tạm thời chưa tính";
	private int isActiveModal = 0;
	private DateTime currentMonth = DateTime.Now;
	private string monthAndYear => currentMonth.ToString("MMMM yyyy", CultureInfo.InvariantCulture);
	private DateTime selectedDate = DateTime.Now;
	// Lịch bé và lớn
	private List<List<DateTime>> smallCalendar = new List<List<DateTime>>();
	private List<List<DateTime>> largeCalendar = new List<List<DateTime>>();

	//
	private List<FieldShiftDTO> _lstFS = new List<FieldShiftDTO>();
	private FieldShiftDTO input = new FieldShiftDTO();
	private string messageString = "";

	//
	private List<FieldTypeDTO> _lstFT = new List<FieldTypeDTO>();

	//
	private List<Shift> _lstS = new List<Shift>();



	private Guid _idFT;
	public Guid IdFT
	{
		get => _idFT;
		set
		{
			if (_idFT != value)
			{
				_idFT = value;
				Console.WriteLine($"IdFT đã thay đổi: {_idFT}"); // Kiểm tra thay đổi
				LoadField(); // Gọi hàm load danh sách sân khi giá trị thay đổi
			}
		}
	}



	private List<FieldDTO> _lstF = new List<FieldDTO>();


	protected async override Task OnInitializedAsync()
	{
		GenerateCalendars();
		await LoadFieldType();
		await LoadShift();
		await LoadField();

		Console.WriteLine($"Số lượng loại sân trong _lstFT: {_lstFT.Count}");

	}

	//Open modal 1
	private void OpenModal()
	{
		isActiveModal = 1;
	}

	//Close modal
	private void CloseModal()
	{
		isActiveModal = 0;
	}

	//Load FieldType
	private async Task LoadFieldType()
	{
		var result = await _svFS.GetAllFieldTypeAsync();

		_lstFT = result.OrderBy(x => x.Name).ToList();
	}

	//Load Field
	private async Task LoadField()
	{
		
		var result = await _svFS.GetFieldByTypeAsync(_idFT);
		if (result != null)
		{
			_lstF = result.OrderBy(x => x.FieldName).ToList();
			StateHasChanged();
		}
		else
		{
			Console.WriteLine("Không tìm thấy dữ liệu cho Field.");
		}
		
	}


	//Load Shift
	private async Task LoadShift()
	{
		var result = await _svFS.GetAllShiftAsync();

		_lstS = result.OrderBy(x => x.ShiftName).ToList();
	}

	//Load FieldShift
	private async Task LoadFieldShift()
	{
		_lstFS = await _svFS.GetAllFieldshiftAsync();
	}


	//lich
	private void GenerateCalendars()
	{
		smallCalendar = GenerateCalendarForMonth(currentMonth);
		largeCalendar = GenerateCalendarForMonth(currentMonth);
	}

	private List<List<DateTime>> GenerateCalendarForMonth(DateTime month)
	{
		var calendar = new List<List<DateTime>>();
		var firstDayOfMonth = new DateTime(month.Year, month.Month, 1);
		var firstDayOfWeek = firstDayOfMonth.AddDays(-(int)firstDayOfMonth.DayOfWeek);

		for (int week = 0; week < 6; week++)
		{
			var weekRow = new List<DateTime>();
			for (int day = 0; day < 7; day++)
			{
				weekRow.Add(firstDayOfWeek.AddDays(week * 7 + day));
			}
			calendar.Add(weekRow);
		}

		return calendar;
	}

	private void PreviousMonth()
	{
		currentMonth = currentMonth.AddMonths(-1);
		GenerateCalendars();
	}

	private void NextMonth()
	{
		currentMonth = currentMonth.AddMonths(1);
		GenerateCalendars();
	}

	private void SelectDate(DateTime date)
	{
		OpenModal();
		selectedDate = date;
		StateHasChanged();
	}

	private string GetClassForDate(DateTime date)
	{
		return date.Date == selectedDate.Date ? "bg-primary text-white" : string.Empty;
	}

	private async Task CreateFieldShift()
	{
		input.Status = AppData.Enum.FieldShiftStatus.WaitingForCheckin;
		input.Time = selectedDate;
		input.CreatedBy = "ba9cff05-7ead-445e-0c2e-08dcf90f16c9";
		input.UpdatedBy = "system";

		// Tạo FieldShift và lấy đối tượng FieldShift trả về
		var createdFieldShift = await _svFS.CreateFieldshiftAsync(input);

		if (createdFieldShift != null && createdFieldShift.IdFieldShift != Guid.Empty)
		{
			// Tìm hoặc tạo Invoice cho ngày này
			Invoice invoice = await GetOrCreateInvoice(selectedDate);

			if (invoice != null)
			{
				// Tạo InvoiceDetail cho FieldShift vừa tạo
				bool checkInvoiceDetail = await CreateInvoiceDetail(invoice.IdInvoice, createdFieldShift.IdFieldShift);

				if (checkInvoiceDetail)
				{
					messageString = "Đặt lịch thành công";
				}
				else
				{
					messageString = "Thêm chi tiết hóa đơn thất bại";
				}
			}
			else
			{
				messageString = "Không thể tạo hoặc lấy hóa đơn";
			}
		}
		else
		{
			messageString = "Đặt lịch thất bại - Không thể tạo FieldShift";
		}
	}

	// Hóa đơn khi tạo mới trong ngày đang bị lỗi (=============================================================================)


	// Hàm kiểm tra hoặc tạo mới Invoice
	private async Task<Invoice> GetOrCreateInvoice(DateTime date)
	{
		// Tìm Invoice theo ngày
		var invoices = await _invoiceService.GetAllInvoiceAsync();
		var existingInvoice = invoices.FirstOrDefault(inv => inv.CreatedAt.Date == date.Date);

		if (existingInvoice != null)
		{
			return existingInvoice;
		}
		else
		{
			// Tạo Invoice mới
			Invoice newInvoice = new Invoice
				{
					IdInvoice = Guid.NewGuid(),
					UserId = Guid.Parse("ba9cff05-7ead-445e-0c2e-08dcf90f16c9"), // Giả sử UserId có trong FieldShift hoặc set từ trước
					Status = 1,
					AdditionalFee = 0, // Phí bổ sung, điều chỉnh nếu cần
					TotalAmount = 0, // Tổng số tiền, điều chỉnh nếu cần
					CreatedAt = date,
					UpdatedAt = date,
					CreatedBy = input.CreatedBy,
					UpdatedBy = "system",
					Notes = "Hóa đơn đặt lịch"
				};

			bool checkInvoice = await _invoiceService.CreateInvoiceAsync(newInvoice);
			return checkInvoice ? newInvoice : null;
		}
	}

	// Hàm tạo mới InvoiceDetail
	private async Task<bool> CreateInvoiceDetail(Guid invoiceId, Guid fieldShiftId)
	{
		InvoiceDetail newInvoiceDetail = new InvoiceDetail
			{
				IdInvoiceDetail = Guid.NewGuid(),
				IdInvoice = invoiceId,
				IdFieldShift = fieldShiftId,
				Deposit = 100000, 
				Status = 1, 
				CreatedAt = DateTime.Now,
				UpdatedAt = DateTime.Now,
				CreatedBy = input.CreatedBy
			};

		return await _invoiceDetailService.CreateInvoiceDetailAsync(newInvoiceDetail);
	}

}
