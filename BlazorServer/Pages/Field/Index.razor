@page "/fields"
@using Appdata
@inject IFieldService FieldService
@inject IJSRuntime JS

<h3>Quản Lý Sân Bóng</h3>

<div class="row">
    <!-- Thông Tin Sân Bóng -->
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <strong>Thông Tin</strong>
            </div>
            <EditForm Model="@field" OnValidSubmit="HandleSubmit" OnInvalidSubmit="HandleInvalidSubmit">
                <DataAnnotationsValidator />
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert @((errorMessage.Contains("thành công") ? "alert-success" : "alert-danger"))" role="alert">
                        @errorMessage
                    </div>
                }

                <!-- Các trường thông tin sân bóng -->
                <div class="form-group">
                    <label for="fieldName">Tên Sân Bóng</label>
                    <input type="text" id="fieldName" @bind="field.FieldName" class="form-control" placeholder="Tên sân bóng" />
                    <ValidationMessage For="@(() => field.FieldName)" />
                </div>
                <div class="form-group">
                    <label for="fieldType">Loại Sân Bóng</label>
                    <input type="text" id="fieldType" @bind="field.Description" class="form-control" placeholder="Loại sân bóng" />
                    <ValidationMessage For="@(() => field.Description)" />
                </div>
                <div class="form-group">
                    <label for="price">Giá</label>
                    <input type="number" id="price" @bind="field.Price" class="form-control" placeholder="Giá" />
                    <ValidationMessage For="@(() => field.Price)" />
                </div>
                <div class="form-group">
                    <label>Trạng Thái</label><br />
                    <input type="radio" id="active" @onclick="() => field.Status = 1" checked="@((field.Status == 1))" />
                    <label for="active">Bình thường</label>
                    <input type="radio" id="maintenance" @onclick="() => field.Status = 0" checked="@((field.Status == 0))" />
                    <label for="maintenance">Sửa chữa</label>
                    <ValidationMessage For="@(() => field.Status)" />
                </div>

                <!-- Nút Tạo và Cập Nhật -->
                <div class="form-group">
                    @if (field.IdField == Guid.Empty)
                    {
                        <button type="submit" class="btn btn-primary">Tạo</button>
                    }
                    else
                    {
                        <button type="submit" class="btn btn-warning">Cập Nhật</button>
                    }
                </div>
            </EditForm>

        </div>
    </div>

    <!-- Danh Sách Sân -->
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <strong>Danh Sách Sân</strong>
                <div class="input-group mt-2">
                    <input type="text" class="form-control" placeholder="Tìm kiếm tên sân bóng..." @bind="searchText" />
                    <div class="input-group-append">
                        <button class="btn btn-secondary" @onclick="SearchFields">
                            <i class="fas fa-search"></i> Tìm Kiếm
                        </button>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>STT</th>
                            <th>Tên</th>
                            <th>Loại sân</th>
                            <th>Giá</th>
                            <th>Trạng Thái</th>
                            <th>Thao Tác</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (fields == null)
                        {
                            <tr>
                                <td colspan="6" class="text-center">Đang tải dữ liệu...</td>
                            </tr>
                        }
                        else if (!fields.Any())
                        {
                            <tr>
                                <td colspan="6" class="text-center">Không có sân bóng nào để hiển thị.</td>
                            </tr>
                        }
                        else
                        {
                            int index = 0; 
                            @foreach (var field in fields)
                            {
                                <tr>
                                    <td>@(++index)</td>
                                    <td>@field.FieldName</td>
                                    <td>@field.Description</td>
                                    <td>@field.Price.ToString("C")</td>
                                    <td>@(field.Status == 1 ? "Bình thường" : "Sửa chữa")</td>
                                    <td>
                                        <button class="btn btn-info" @onclick="() => EditField(field.IdField)">
                                            <i class="fas fa-edit"></i> Sửa
                                        </button>
                                        <button class="btn btn-danger" @onclick="() => ConfirmDelete(field.IdField)">
                                            <i class="fas fa-trash-alt"></i> Xóa
                                        </button>
                                    </td>

                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Field> allFields = new List<Field>(); // Danh sách đầy đủ
    private List<Field> fields = new List<Field>(); // Danh sách hiển thị
    private Field field = new Field();
    private string searchText = string.Empty;
    private int index = 0;
    private ElementReference successToast;

    protected override async Task OnInitializedAsync()
    {
        allFields = await FieldService.GetAllFieldsAsync();
        fields = new List<Field>(allFields);
    }

    private string errorMessage = string.Empty;

    private async Task CreateField()
    {
        try
        {
            bool success = await FieldService.CreateFieldAsync(field);

            if (success)
            {
                fields = await FieldService.GetAllFieldsAsync(); 
                field = new Field(); 
                errorMessage = "Đã tạo mới thành công!"; 
            }
            else
            {
                errorMessage = "Không thể tạo sân mới. Hãy kiểm tra lại dữ liệu.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Đã xảy ra lỗi: {ex.Message}";
        }
    }




    private async Task UpdateField()
    {
        try
        {
            bool success = await FieldService.UpdateFieldAsync(field.IdField, field);

            if (success)
            {
                fields = await FieldService.GetAllFieldsAsync(); 
                field = new Field();
                errorMessage = "Cập nhật thành công!"; 
            }
            else
            {
                errorMessage = "Không thể cập nhật sân. Hãy kiểm tra lại dữ liệu.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Đã xảy ra lỗi: {ex.Message}";
        }
    }




    private void HandleInvalidSubmit()
    {
        Console.WriteLine("Form không hợp lệ. Hãy kiểm tra các trường nhập liệu!");
    }

    private async Task HandleSubmit()
{
    if (field.IdField == Guid.Empty)
    {
        await CreateField(); // Gọi tạo mới nếu IdField trống
    }
    else
    {
        await ConfirmUpdateField(); // Gọi xác nhận cập nhật nếu có IdField
    }
}


    private void EditField(Guid id)
    {
        var fieldToEdit = fields.FirstOrDefault(f => f.IdField == id);
        if (fieldToEdit != null)
        {
            field = new Field
                {
                    IdField = fieldToEdit.IdField,
                    FieldName = fieldToEdit.FieldName,
                    Price = fieldToEdit.Price,
                    Description = fieldToEdit.Description,
                    Status = fieldToEdit.Status,
                    CreatedAt = fieldToEdit.CreatedAt,
                    UpdatedAt = fieldToEdit.UpdatedAt,
                    CreatedBy = fieldToEdit.CreatedBy,
                    UpdatedBy = fieldToEdit.UpdatedBy
                };
        }
    }



    private async Task DeleteField(Guid id)
    {
        await FieldService.DeleteFieldAsync(id);
        fields = await FieldService.GetAllFieldsAsync(); // Tải lại danh sách sân
    }

    private void SearchFields()
    {
        if (string.IsNullOrEmpty(searchText))
        {
            fields = new List<Field>(allFields); // Khôi phục danh sách đầy đủ khi tìm kiếm rỗng
        }
        else
        {
            fields = allFields
                .Where(f => f.FieldName.Contains(searchText, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    private async Task ConfirmUpdateField()
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirmAction", "Bạn có chắc chắn muốn cập nhật sân này?");
        if (confirmed)
        {
            await UpdateField();
        }
    }


    private async Task ConfirmDelete(Guid id)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirmAction", "Bạn có chắc chắn muốn xóa sân này?");
        if (confirmed)
        {
            await DeleteField(id);
        }
    }
}
